"use strict";exports.id=393,exports.ids=[393],exports.modules={4393:(e,t,o)=>{o.a(e,async(e,i)=>{try{o.r(t),o.d(t,{Arm:()=>Arm,WebGL:()=>WebGL});var a=o(997),n=o(4165),r=o(3784),s=o(6317),l=o(1443),d=o(1088),u=o(8922),c=o(5787),h=o(6689),m=o(2949),g=o(3969),f=o(4365),x=e([s,l,c,m]);function Raf({render:e=!0}){let{advance:t}=(0,r.useThree)();(0,s.useFrame)(o=>{e&&t(o/1e3)})}function Particles({width:e=250,height:t=250,depth:o=250,count:i=1e3,scale:n=100,size:s=100}){let d=(0,h.useMemo)(()=>{let a=Array(3*i);for(let i=0;i<a.length;i+=3)a[i]=m.MathUtils.randFloatSpread(e),a[i+1]=m.MathUtils.randFloatSpread(t),a[i+2]=m.MathUtils.randFloatSpread(o);return Float32Array.from(a)},[i,n,e,t,o]),u=(0,h.useMemo)(()=>Float32Array.from(Array.from({length:3*i},()=>100*Math.random())),[i]),c=(0,h.useMemo)(()=>Float32Array.from(Array.from({length:i},()=>Math.random()*s)),[i,s]),x=(0,h.useMemo)(()=>Float32Array.from(Array.from({length:i},()=>.2*Math.random())),[i]),p=(0,h.useMemo)(()=>Float32Array.from(Array.from({length:i},()=>100*Math.random())),[i]),v=(0,h.useRef)(),y=(0,h.useRef)(),M=(0,h.useMemo)(()=>({uTime:{value:0},uColor:{value:new m.Color("rgb(255, 207, 206)")},uScroll:{value:0},uResolution:{value:new m.Vector2(e,t)}}),[]);return(0,h.useEffect)(()=>{M.uResolution.value.set(e,t)},[e,t]),(0,r.useFrame)(({clock:e})=>{M.uTime.value=e.elapsedTime}),(0,l.v)(({scroll:e})=>{M.uScroll.value=e}),(0,a.jsxs)("points",{ref:y,children:[(0,a.jsxs)("bufferGeometry",{children:[a.jsx("bufferAttribute",{attach:"attributes-position",args:[d,3]}),a.jsx("bufferAttribute",{attach:"attributes-noise",args:[u,3]}),a.jsx("bufferAttribute",{attach:"attributes-size",args:[c,1]}),a.jsx("bufferAttribute",{attach:"attributes-speed",args:[x,1]}),a.jsx("bufferAttribute",{attach:"attributes-scale",args:[p,1]})]}),a.jsx("shaderMaterial",{ref:v,vertexShader:f.Z,fragmentShader:g.Z,transparent:!0,uniforms:M})]})}[s,l,c,m]=x.then?(await x)():x;let p=[{position:[-.1,-1.75,0],scale:.045,rotation:[0,.5*Math.PI,0],type:1},{position:[.15,-.4,0],scale:.02,rotation:[m.MathUtils.degToRad(-45),m.MathUtils.degToRad(-135),m.MathUtils.degToRad(-45)],type:1},{position:[.15,-.4,0],scale:.02,rotation:[m.MathUtils.degToRad(45),m.MathUtils.degToRad(-315),m.MathUtils.degToRad(-45)],type:1},{position:[-.2,-.35,0],scale:.02,rotation:[m.MathUtils.degToRad(-90),m.MathUtils.degToRad(-405),m.MathUtils.degToRad(-45)],type:1},{position:[-1.2,-.6,0],scale:.05,rotation:[m.MathUtils.degToRad(-90),m.MathUtils.degToRad(-405),m.MathUtils.degToRad(-45)],type:1},{position:[-1.6,-.6,0],scale:.05,rotation:[m.MathUtils.degToRad(-90),m.MathUtils.degToRad(-405),m.MathUtils.degToRad(-45)],type:1},{position:[.16,-1.38,0],scale:.05,rotation:[m.MathUtils.degToRad(0),m.MathUtils.degToRad(200),m.MathUtils.degToRad(-16)],type:2},{position:[0,-.68,0],scale:.04,rotation:[m.MathUtils.degToRad(0),m.MathUtils.degToRad(-14),m.MathUtils.degToRad(-16)],type:2},{position:[-.22,-.61,0],scale:.03,rotation:[m.MathUtils.degToRad(0),m.MathUtils.degToRad(-517),m.MathUtils.degToRad(-16)],type:2},{position:[.2,-.46,0],scale:.03,rotation:[m.MathUtils.degToRad(0),m.MathUtils.degToRad(-700),m.MathUtils.degToRad(-16)],type:2}],v=new m.MeshPhysicalMaterial({color:new m.Color("#eb5e28"),metalness:1,roughness:.4,wireframe:!0,side:m.DoubleSide});function Arm(){let{scene:e}=(0,n.useGLTF)("/models/arm.glb"),{scene:t}=(0,n.useGLTF)("/models/arm2.glb"),[o,i]=(0,h.useState)(1),[{color:s,roughness:g,metalness:f,wireframe:x},y]=(0,d.useControls)(()=>({color:"#b0b0b0",roughness:{min:0,value:.4,max:1},metalness:{min:0,value:1,max:1},wireframe:!1}),[]),[{lightsColor:M,light1:b,light2:T,light1Intensity:R,light2Intensity:j,ambientColor:C},U]=(0,d.useControls)("lights",()=>({light1:{step:1,value:[-200,150,50]},light2:{step:1,value:[300,-100,150]},light1Intensity:{min:0,value:1,max:1},light2Intensity:{min:0,value:1,max:1},lightsColor:"#eb5e28",ambientColor:"#0E0E0E"}),[]),[{custom:w,scale:P,position:A,rotation:S}]=(0,d.useControls)("model",()=>({custom:!1,scale:{min:0,value:.05,max:.06,step:.001},position:{value:[0,0,0]},rotation:{step:1,min:-360,value:[0,0,0],max:360}}));(0,d.useControls)("model",()=>({export:(0,d.button)(()=>{alert(JSON.stringify({scale:P.toFixed(3),position:A,rotation:S,type:o}))})}),[P,A,S,o]),(0,h.useEffect)(()=>{v.color=new m.Color(s),v.roughness=g,v.metalness=f,v.wireframe=x},[s,g,f,x,v]),(0,h.useEffect)(()=>{e&&e.traverse(e=>{e.material&&(e.material=v)})},[e,v]),(0,h.useEffect)(()=>{t&&t.traverse(e=>{e.material&&(e.material=v)})},[t,v]);let F=(0,h.useRef)(),{viewport:z}=(0,r.useThree)(),I=(0,c.o)(({thresholds:e})=>e),L=(0,h.useMemo)(()=>Object.values(I).sort((e,t)=>e-t),[I]),[K,E]=(0,h.useState)(0);return(0,h.useEffect)(()=>{0===K?(U({light1Intensity:.35,light2Intensity:.15,lightsColor:"#eb5e28",ambientColor:"#eb5e28"}),y({color:"#b0b0b0",roughness:.4,metalness:1})):(U({light1Intensity:1,light2Intensity:1,lightsColor:"#efefef",ambientColor:"#b0B0B0"}),y({color:"#efefef",roughness:.4,metalness:.6}))},[K]),(0,l.v)(({scroll:e})=>{E(e<I["light-start"]?0:1)},[I]),(0,l.v)(({scroll:e})=>{if(!F.current)return;if(w){F.current.scale.setScalar(z.height*P),F.current.position.set(z.width*A[0],z.height*A[1],0),F.current.rotation.fromArray(S.map(e=>m.MathUtils.degToRad(e)));return}let t=L.findIndex(t=>e<t)-1,o=L[t],a=L[t+1],n=(0,u.KK)(o,a,e,0,1),r=p[t],s=p[t+1];if(F.current&&(F.current.visible=r?.type===s?.type),!s)return;let l=(0,u.KK)(0,1,n,r.scale,s.scale),d=new m.Vector3(z.width*(0,u.KK)(0,1,n,r.position[0],s.position[0]),z.height*(0,u.KK)(0,1,n,r.position[1],s.position[1]),0),c=new m.Euler().fromArray([,,,].fill(0).map((e,t)=>(0,u.KK)(0,1,n,r.rotation[t],s.rotation[t])));F.current.scale.setScalar(z.height*l),F.current.position.copy(d),F.current.rotation.copy(c),i(s.type)}),(0,a.jsxs)(a.Fragment,{children:[a.jsx("ambientLight",{args:[new m.Color(C)]}),a.jsx("group",{position:b,children:a.jsx("directionalLight",{args:[new m.Color(M),R]})}),a.jsx("group",{position:T,children:a.jsx("directionalLight",{args:[new m.Color(M),j]})}),a.jsx(n.Float,{floatIntensity:w?0:1,rotationIntensity:w?0:1,children:(0,a.jsxs)("group",{ref:F,children:[1===o&&a.jsx("primitive",{object:e,scale:[1,1,1]}),2===o&&a.jsx("primitive",{object:t,scale:[1,1,1]})]})})]})}function Content(){let{viewport:e}=(0,r.useThree)();return(0,a.jsxs)(a.Fragment,{children:[a.jsx(Particles,{width:e.width,height:e.height,depth:500,count:100,scale:500,size:150}),a.jsx(Arm,{})]})}function WebGL({render:e=!0}){return(0,a.jsxs)(r.Canvas,{gl:{powerPreference:"high-performance",antialias:!0,alpha:!0},dpr:[1,2],frameloop:"never",orthographic:!0,camera:{near:.01,far:1e4,position:[0,0,1e3]},children:[a.jsx(Raf,{render:e}),a.jsx(h.Suspense,{children:a.jsx(Content,{})})]})}i()}catch(e){i(e)}})},3969:(e,t,o)=>{o.d(t,{Z:()=>i});let i="#define GLSLIFY 1\nuniform float uTime;\nuniform vec3 uColor;\n\nvoid main() {\n  float distanceToCenter = distance(gl_PointCoord, vec2(0.5));\n  float strength = 0.05 / distanceToCenter - 0.1;\n\n  gl_FragColor = vec4(uColor,strength);\n}"},4365:(e,t,o)=>{o.d(t,{Z:()=>i});let i="#define GLSLIFY 1\n// Simplex 2D noise\n//\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nattribute float size;\nattribute float speed;\nattribute vec3 noise;\nattribute float scale;\n\nuniform float uTime;\nuniform float uScroll;\nuniform vec2 uResolution;\n\nvoid main() {\n  vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n\n  modelPosition.x += snoise(vec2(noise.x, uTime * speed)) * scale;\n  modelPosition.y += snoise(vec2(noise.y, uTime * speed)) * scale;\n  modelPosition.z += snoise(vec2(noise.z, uTime * speed)) * scale;\n\n  float depth = (1.0 / - (viewMatrix * modelPosition).z);\n\n  modelPosition.y += uScroll * depth * 100.;\n  modelPosition.y = mod(modelPosition.y, uResolution.y) - uResolution.y/2.;\n\n  vec4 viewPosition = viewMatrix * modelPosition;\n  vec4 projectionPostion = projectionMatrix * viewPosition;\n\n  gl_Position = projectionPostion;\n  gl_PointSize = size * 100.;\n  gl_PointSize *= (1.0 / - viewPosition.z);\n}"}};